/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

apply from: 'plugin-common.gradle'

project.ext.pluginVersion = '2.0.0'
project.ext.fullVersion = project.distVersion ? "${project.pluginVersion}-${project.distVersion}" : project.pluginVersion

version = project.fullVersion
group = 'cd.go'

project.ext.pluginDesc = [
        id         : 'cd.go.authorization.google',
        version    : project.fullVersion,
        goCdVersion: '17.5.0',
        name       : 'Google oauth authorization plugin',
        description: 'Google oauth authorization plugin for GoCD',
        vendorName : 'GoCD Contributors',
        vendorUrl  : 'https://github.com/gocd-contrib/google-oauth-authorization-plugin'
]

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.5.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'

    testCompile group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.4.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.28'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.4.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.8.1'
}

processResources {
    from("src/main/resource-templates") {
        filesMatching('plugin.xml') {
            expand project.pluginDesc
        }

        filesMatching('plugin.properties') {
            expand project.pluginDesc
        }
    }
}

tasks.withType(Jar) { jarTask ->
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    ['MD5', 'SHA1', 'SHA-256'].each { algo ->
        jarTask.outputs.files("${jarTask.archivePath}.${algo}")
        jarTask.doLast {
            ant.checksum file: jarTask.archivePath, format: 'MD5SUM', algorithm: algo
        }
    }

    manifest {
        attributes(
                'Go-Version': project.pluginDesc.goCdVersion,
                'Plugin-Revision': project.pluginDesc.version,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

sourceSets {
    test {
        java {
            compileClasspath += configurations.compileOnly
            runtimeClasspath += configurations.compileOnly
        }
    }
}

jar {
    from(configurations.compile) {
        into "lib/"
    }

//    This is useful for debugging
//    from(sourceSets.main.java) {
//        into "/"
//    }
}